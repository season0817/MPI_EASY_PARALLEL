方法1：面积积分
π/4=∫_0^1▒1/(1+x^2 )=argtgx|(1,0)
对积分进行数值求解即可。
对区间进行划分。简单并行计算。
这是MPICH2中提供的示例方式。

幂级数法
tg（π /4）=1
π /4= arctg（1）
对arctg（1）进行幂级数展开即可：
arctgx=∫_0^x▒dx/(1+x^2 )=∫_0^x▒∑_(n=0)^∞▒〖 〖(-x^2)〗^n 〗 dx 交换次序=∑_(n=0)^∞▒∫_0^x▒〖〖(-x^2)〗^n dx〗
 计算积分得：argtgx=∑_(n=0)^∞▒〖〖(-1)〗^n  x^(2n+1)/(2n+1)〗
所以当x=1 时：
 π /4= ∑_(n=0)^∞▒〖(-1)〗^n/(2n+1) = 1-1/3+1/5-1/7+……+ (-1)n/2n+1
并行计算方法：
	事先确定进程数。
	主进程确定计算的项数。向各个子进程发送项数。
	各个子进程进行自己这部分的累加。
	主进程集中。
	记录运算时间。

改进的幂级数
以上方法收敛很慢。（每一项衰减得慢），要精确到10^(-N) 大致需要计算2×10^N 项。

为提高计算速度采用以下改进的方法：
对于幂级数而言，当x越接近于0时，收敛越快。 上面的例子中，x=1，离0有相当的距离。
令x=1/5. 记φ=arctg(1/5). tgφ =1/5.
tg2φ= 2tgφ/(1-tg2φ) = 5/12.
同理tg4φ = 120/119. 而tg（π /4）=1，可见 4φ 与π /4 非常接近。
令 θ =4φ- π /4 
所以tgθ =tg(4φ- π /4) = (120/119-1)/(120/119+1)=1/239  （根据 tan(A-B) = (tanA-tanB)/(1+tanAtanB)）
θ =arctg (1/239).
所以：
π /4 =4φ –θ 
      = 4 × arctg(1/5)- arctg(1/239)
再利用幂级数展开：
=4 ∑_(n=0)^∞▒〖(-1)〗^n   1/((2n+1)5^(2n+1) ) - ∑_(n=0)^∞▒〖(-1)〗^n   1/((2n+1)239^(2n+1) )
   上述级数收敛的速度非常快。
左边部分：当n=4时，即有1/9×59 < 10-6
而右边收敛更快。
并行计算方法：
利用同方法2类似的方式。

	蒙特卡洛方式。
	各个子进程的工作
	使用随机数在正方形内投点
	计算落在圆内的点的次数。
	计算比值。
	主进程收集所有的结果，进行平均。
π/4=落在圆内的次数/在正方形内投点的次数

随机积分方式
利用公式：
 
计算  π=4∫_0^1▒1/(1+x^2 )

6.	五种方式比较时间。
a)	五种算法达到同样的精度：3.141592653589793238462643  24
b)	以精度作为控制标准。
c)	比较五种算法的时间。
d)	如单机（多进程）运算时间太长，考虑集群的方式。







该项目目前完成了前五种方法
还有一些方法之后可实践：
	其他的计算公式： Borwein, J.M., and Borwein, P.B. 1987, Pi and the AGM: A Study in Analytic Number Theory and
Computational Complexity
X_0=√2
π_0=2+√2
Y_0=∜2
迭代公式为：
 X_(i+1)=1/2(√(X_i  )+1/√(X_i  ))
π_(i+1)= π_i (  (X_(i+1)+1)/(Y_i+1)   )
 Y_(i+1)=(Y_i √(X_(i+1) )+1/√(X_(i+1) ))/(Y_i+1) 
此公式为二次收敛。每一次迭代有效数字增加一倍。该方法称为算术几何平均法。AGM

	其他的计算公式1
π /4 = 12 arctg(1/49)+32arctg(1/57)- 5arctg(1/239)+ 12arctg(1/110443)
2002年日本东京大学的金田康正使用该公式打破世界纪录12411亿位。

	其他的公式2.  Chudnovsky 公式：

1/π=12∑_(n=0)^∞▒(（-1）^n （6n）!)/((3n!)〖n!〗^3 ).((An+B))/C^(3n+3/2) 
A = 1657145277365 + 212175710912p61,
B = 107578229802750 + 13773980892672p61,
C = 5280(236674 + 30303p61)
当前的世界纪录。

	其他的公式3 BBP公式  Borwein 兄弟发明
π=∑_(n=0)^∞▒1/16^k (4/(8k+1)-2/(8k+4)-1/(8k+5)-1/(8k+6))
此公式可以直接计算出在16进制下的某一指定位置的数字，而无需计算前面的数字。

	其他相关问题：高精度的算术运算。 Karatsuba算法。FFT算法。
	并行的算法实现
